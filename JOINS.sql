CREATE DATABASE JOINS;
USE JOINS;
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  order_status VARCHAR(20)
);

INSERT INTO orders (order_id, customer_id, order_date, order_status)
VALUES 
    (1,1,'2022-05-01','Delivered'),
    (2,5,'2022-05-05', 'Delivered'),
    (3,2,'2022-12-11', 'Delivered'),
    (4,3,'2022-12-25', 'Delivered'),
    (5,4,'2022-11-10','Pending');

CREATE TABLE order_details (
  order_id INT,
  product_id INT,
  quantity INT,
  unit_price DECIMAL(10,2),
  PRIMARY KEY (order_id, product_id)
);

INSERT INTO order_details (order_id, product_id, quantity, unit_price)
VALUES 
    (1,2,3,100),
    (2,3,2,200),
    (3,1,1,250),
    (4,1,1,250),
    (5,4,1,150);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(50),
  category_id INT,
  price DECIMAL(10,2)
);

INSERT INTO products (product_id, product_name, category_id, price)
VALUES 
    (1, 'Product 1',1,100),
    (2, 'Product 2',2,200),
    (3, 'Product 3',3,100),
    (4, 'Product 4',1,80),
    (5, 'Product 5',2,150);

CREATE TABLE categories (
  category_id INT PRIMARY KEY,
  category_name VARCHAR(50)
);

INSERT INTO categories (category_id, category_name)
VALUES 
    (1, 'Electronics'),
    (2, 'Clothing'),
    (3, 'Home & Kitchen');

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(50),
  email VARCHAR(50),
  address VARCHAR(100)
);

INSERT INTO customers (customer_id, name, email, address)
VALUES 
    (1, 'John','john@example.com','123 Main Street'),
    (2, 'Maria','maria@example.com','456 Park Avenue'),
    (3, 'Emma','emma@example.com','789 Broad Street'),
    (4, 'James','james@example.com','135 Wall Street'),
    (5, 'Fang','fang@example.com', '221 Baker Street');

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

INSERT INTO departments (department_id, department_name)
VALUES 
    (1, 'Sales'),
    (2, 'Marketing'),
    (3, 'Engineering'),
    (4, 'Finance'),
    (5, 'Operations'),
    (6, 'HR');
    
CREATE TABLE employees (
  emp_id INT PRIMARY KEY,
  name VARCHAR(50),
  manager_id INT,
  salary DECIMAL(10,2),
  department_id INT,
  FOREIGN KEY (department_id) REFERENCES departments(department_id)
);


INSERT INTO employees (emp_id, name, manager_id, salary, department_id)
VALUES 
    (1, 'John',2,50000,1),
    (2, 'Maria',1,25000,3),
    (3, 'Emma',2,45000,3),
    (4, 'James',3,55000,6),
    (5, 'Fang',1, 60000,1),
    (6, 'Chad',2, 20000,4),
    (7, 'Manish',3, 70000,6),
    (8, 'Gopal',1, 65000,5);
#Q1-What is the total quantity of products sold in the month of May 2022?
SELECT * FROM order_details;
SELECT * FROM orders;
SELECT * FROM products;
SELECT SUM(od.quantity) AS total_quantity
FROM orders o 	
INNER JOIN order_details od ON o.order_id = od.order_id
WHERE o.order_date >= '2022-05-01' AND o.order_date < '2022-06-01';

#Q2-What is the total revenue generated by the category "Electronics" in the month of December 2022
SELECT SUM(od.quantity*od.unit_price) AS total_revenue
FROM orders o
INNER JOIN order_details od 
ON o.order_id=od.order_id
INNER JOIN products p 
on od.product_id=p.product_id
INNER JOIN categories c ON p.category_id = c.category_id
WHERE c.category_name = 'Electronics' AND o.order_date >= '2022-12-01' AND o.order_date < '2023-01-01';

#Q3-Write a query to return the name and email of all customers who have placed an order in the month of May 
#and have ordered a product with a price greater than $100.
SELECT c.name, c.email
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id
WHERE MONTH(o.order_date) = 5 AND p.price > 100;

#Q4-Write a query to return the name and address of all customers who have ordered a product from the category 'Electronics' 
#and whose order status is 'Delivered'.
SELECT c.name, c.address
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id
INNER JOIN categories cat ON p.category_id = cat.category_id
WHERE cat.category_name = 'Electronics' AND o.order_status = 'Delivered';

#Q5-Write a query to return the product name and price of all products, including products that have no orders placed yet. 
SELECT p.product_name, p.price, o.order_status
FROM products p
RIGHT JOIN order_details od ON p.product_id = od.product_id
JOIN orders o ON od.order_id=o.order_id;

#Q6-Write a query to return the name and email of all customers who have placed an order for a product with a price greater than $100.
#Include customers who have not placed any orders. 
SELECT c.name, c.email
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_details od ON o.order_id = od.order_id
LEFT JOIN products p ON od.product_id = p.product_id AND p.price > 100;

#Q7-Write a query to return the name and address of all customers who have placed an order for a product in the category 'Electronics', 
#including customers who have not placed any orders.
SELECT c.name, c.address,o.order_status
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_details od ON o.order_id = od.order_id
LEFT JOIN products p ON od.product_id = p.product_id
LEFT JOIN categories cat ON p.category_id = cat.category_id AND cat.category_name = 'Electronics';

#Q8-Write a query to return all department names along with the number of employees in each department, 
#including departments with no employee, identifies the departments with no employees?
SELECT departments.department_name, COUNT(employees.emp_id)
FROM departments
LEFT JOIN employees ON departments.department_id = employees.department_id
GROUP BY departments.department_name;

#Q9-Write a query to return the names of all customers who have not placed an order.(#Ans- There are no such employees who have not placed an order)
SELECT c.name,o.order_status,o.order_id FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

#Q10-Write a query to return the customer name and order date for all orders, including those with no corresponding customer or product data.
#(Ans-There is no such customer with no corresponding customer or product data.)
SELECT c.name, o.order_date
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_details od ON o.order_id = od.order_id
RIGHT JOIN products p ON od.product_id = p.product_id
WHERE c.customer_id IS NULL OR p.product_id IS NULL;

#Q11-Consider two tables, customers and orders, with a Full Outer Join on the customer_id column. how many customers didn't place any order?
SELECT COUNT(c.customer_id)
FROM customers c
LEFT JOIN orders o
ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;

#Q12-Write a query to return the name of all employees and their corresponding skip-level manager's name.
SELECT e1.name AS employee_name, e2.name AS skip_level_manager_name
FROM employees e1
INNER JOIN employees e2 ON e1.manager_id = e2.emp_id
INNER JOIN employees e3 ON e2.manager_id = e3.emp_id;

#Q13-Write a query to cross join the "customers" and "products" tables.
SELECT * FROM customers CROSS JOIN products;

#Q14-Write a query to cross join the "orders" and "order_details" tables.
SELECT * FROM orders CROSS JOIN order_details;

#Q15-Write a query to perform a cross join between the "customers" and "orders" tables where the "order_status" is "Delivered"?
 SELECT * FROM customers CROSS JOIN orders
 WHERE order_status="Delivered";
 
 #Q16-Write a query to perform a cross join between the "products" and "categories" tables where the "category_name" is "Electronics"?
SELECT * FROM products CROSS JOIN categories
WHERE category_name="Electronics";
























